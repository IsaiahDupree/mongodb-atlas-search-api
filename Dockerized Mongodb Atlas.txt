I need a backend-coder and docker intermediate or pro to help me make this project:

Objectives:
Obj1: Make a Search and ingest API infront of MongoDb Atlas Search with knnBeta enabled.

Obj2: Be able to use vector search to search 10000 products and return a faceted resultset. The set will be used from a Ecom-search-results page.

Obj3: The search and Ingest api should use a LOCAL(!no time for an extra api hop!)  embeddingsmodel to generate embeddings for product.title and product.description and store that in the mongoDb along with the product-documents.

Obj4:  Able to ingest salesdata being orderlines with the folowing info;  Orderline fields: [orderNr, ProductNr, CustomerNr, SeasonName, DateTime]
This data should be used to generate "Product recommendations ala "Users who bought X also bought these products" (See attached chatGpt chat)

Obj5: Authorize access to API via a shared secret om request header value "x-apikey". Don't overengineer. just check if the value is correct as set in some proj-configfile.

** Implementation requirements: **
Configure MongoDB and Python Fastcgi on one shared container.

About the data:
The product data will be in norwegian and swedish. This means we will use a vector model that works good with those languages when generating embeddings: paraphrase-multilingual-MiniLM-L12-v2

Main fields of product json:
id:"prod1",
title:"This is product",
description: "Nice description",
brand:"Nice brand",
imageThumbnailUrl:""
priceOriginal:234, // undiscounted price
priceCurrent:123, // current price is nice
isOnSale:true,// cool, it's on discount
ageFrom:1
ageTo:3
ageBucket: "1 to 3 years"  // typical filtering bucket
color: "red"
seasons: ["winter", "spring"]  //when is this product relevant, maybe used for boosting
productType: "main" //main, part, extras
seasonRelevancyFactor: 0.4 // 0 to 1 used for boosting
stockLevel:123 //yes currently in stock

Endpoints we need:
    POST /ingestProducts: Accepts product or content data, preprocesses (decompounds, embeds, etc.), and writes to the
search backend.

    POST /ingestOrderline: Accepts orderline data for relevancy/similarity search

    POST /search: Accepts user query, embeds it, runs a combined keyword + vector search, and returns ranked results.

    POST /autosuggest: Lighter variant of /search, optimized for prefix or partial matches .

    POST /similar/[productid]: Lighter variant of /search, optimized for prefix or partial matches with faster heuristics.

    GET /doc/[productid]: Retrieve full document (good for click-through from search results).

    GET /health: For health checks and monitoring.

    POST /query-explain: Debug endpoint to show how query was interpreted (embeddings, terms used, etc.)

    POST /feedback: Log user actions for learning-to-rank or query tuning

   DELETE /remove/product/[productid]
   DELETE /remove/proudcts/all



Some relevant shared AI chats:
*https://chatgpt.com/share/67f25f5d-ff48-8000-a0d6-0acd3abcaafd
*Naive recommender system in MongoDb: https://claude.ai/share/950591ec-4703-4dc5-bed8-077f743f9121

I am open for extending the project with more functionality based on successfull v1.



How can i make a naive product recommender system using mongoDB and atlas search. I have a products table, and i have all orders with orderlines of my ecom customers. (anonymized, but with a userid so that one can know that custom x both prodyc a,b,c during on same order)I'll help you build a naive product recommender system using MongoDB and Atlas Search. Let's create a step-by-step approach.
Product Recommendation System Architecture
First, let's understand what we're working with:

Products collection (containing product details)
Orders collection with order lines (showing which products were purchased together)
User IDs to track customer purchase patterns

Here's how we can build a simple yet effective recommender system:
Step 1: Set up your MongoDB Atlas cluster with Atlas Search
javascript// Enable Atlas Search on your cluster
// Create an Atlas Search index on your products collection
{
  "mappings": {
    "dynamic": true,
    "fields": {
      "name": {
        "type": "string",
        "analyzer": "lucene.standard"
      },
      "description": {
        "type": "string",
        "analyzer": "lucene.standard"
      },
      "category": {
        "type": "string"
      }
    }
  }
}
Step 2: Create an aggregation pipeline for "Frequently Bought Together"
javascriptdb.orders.aggregate([
  // Unwind order lines to get individual product purchases
  { $unwind: "$orderLines" },
  
  // Group by order ID to identify products bought together
  { $group: {
      _id: "$orderId",
      products: { $push: "$orderLines.productId" },
      userId: { $first: "$userId" }
    }
  },
  
  // Filter orders with at least 2 products
  { $match: { "products.1": { $exists: true } } },
  
  // Unwind products to create pairs
  { $unwind: "$products" },
  
  // For each product, create pairs with other products in same order
  { $unwind: {
      path: "$products",
      includeArrayIndex: "position"
    }
  },
  
  // Group by product pairs to count co-occurrences
  { $group: {
      _id: {
        product1: { $min: ["$products", "$products"] },
        product2: { $max: ["$products", "$products"] }
      },
      count: { $sum: 1 }
    }
  },
  
  // Filter out self-pairs
  { $match: { "$expr": { $ne: ["$_id.product1", "$_id.product2"] } } },
  
  // Sort by frequency
  { $sort: { count: -1 } }
])
Step 3: Implement personalized recommendations based on user history
javascript// Function to get recommendations for a specific user
function getRecommendationsForUser(userId) {
  return db.orders.aggregate([
    // Match orders from this user
    { $match: { userId: userId } },
    
    // Unwind order lines
    { $unwind: "$orderLines" },
    
    // Get the products this user has purchased
    { $group: {
        _id: userId,
        purchasedProducts: { $addToSet: "$orderLines.productId" }
      }
    },
    
    // Lookup products frequently bought with these products
    { $lookup: {
        from: "productPairs", // This could be a materialized view from step 2
        localField: "purchasedProducts",
        foreignField: "_id.product1",
        as: "recommendations"
      }
    },
    
    // Unwind recommendations
    { $unwind: "$recommendations" },
    
    // Filter out products user already has
    { $match: {
        $expr: {
          $not: { $in: ["$recommendations._id.product2", "$purchasedProducts"] }
        }
      }
    },
    
    // Group and sum scores for each recommended product
    { $group: {
        _id: "$recommendations._id.product2",
        score: { $sum: "$recommendations.count" }
      }
    },
    
    // Sort by recommendation score
    { $sort: { score: -1 } },
    
    // Limit results
    { $limit: 10 },
    
    // Lookup product details
    { $lookup: {
        from: "products",
        localField: "_id",
        foreignField: "_id",
        as: "productDetails"
      }
    },
    
    { $unwind: "$productDetails" }
  ]);
}
Step 4: Combine with content-based filtering using Atlas Search
javascript// Function to get content-based recommendations based on a product
function getContentBasedRecommendations(productId) {
  // First get the product details
  const product = db.products.findOne({ _id: productId });
  
  // Use Atlas Search to find similar products
  return db.products.aggregate([
    {
      $search: {
        "compound": {
          "should": [
            {
              "text": {
                "query": product.name,
                "path": "name",
                "score": { "boost": { "value": 3 } }
              }
            },
            {
              "text": {
                "query": product.description,
                "path": "description",
                "score": { "boost": { "value": 2 } }
              }
            },
            {
              "equals": {
                "path": "category",
                "value": product.category,
                "score": { "boost": { "value": 5 } }
              }
            }
          ]
        }
      }
    },
    // Exclude the original product
    { $match: { _id: { $ne: productId } } },
    // Limit results
    { $limit: 5 }
  ]);
}
Step 5: Build a hybrid recommendation API
Let's create a combined API that provides hybrid recommendations:
javascript// Function to get hybrid recommendations for a user
async function getHybridRecommendations(userId) {
  // Get collaborative filtering recommendations
  const collaborativeRecs = await getRecommendationsForUser(userId);
  
  // Get the user's most recent purchases
  const recentPurchases = await db.orders.aggregate([
    { $match: { userId: userId } },
    { $sort: { orderDate: -1 } },
    { $limit: 1 },
    { $unwind: "$orderLines" },
    { $project: { productId: "$orderLines.productId", _id: 0 } }
  ]).toArray();
  
  // Get content-based recommendations for recent purchases
  const contentBasedRecs = [];
  for (const purchase of recentPurchases) {
    const recs = await getContentBasedRecommendations(purchase.productId);
    contentBasedRecs.push(...recs);
  }
  
  // Combine and deduplicate recommendations
  const allRecs = [...collaborativeRecs, ...contentBasedRecs];
  const dedupedRecs = [];
  const seenIds = new Set();
  
  for (const rec of allRecs) {
    if (!seenIds.has(rec._id.toString())) {
      seenIds.add(rec._id.toString());
      dedupedRecs.push(rec);
    }
  }
  
  // Return top recommendations
  return dedupedRecs.slice(0, 10);
}
Optimizations and Next Steps

Pre-compute recommendations: Calculate the product pairs offline and store them in a separate collection for faster retrieval.
Weighted scoring: Adjust scores based on recency of purchases or other factors.
Use MongoDB Triggers: Set up change streams to update recommendations when new orders are placed.
A/B testing: Implement different recommendation strategies and measure their effectiveness.
Scaling: Use MongoDB indexes and optimized queries for better performance as your data grows.

Would you like me to expand on any specific part of this implementation?